//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::Kind;
use crate::generated::types::PermissionStrategy;
use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Policy {
pub kind: Kind,
pub strategy: PermissionStrategy,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<Vec<serde_with::DisplayFromStr>>"))]
pub validator_identities: Vec<Pubkey>,
}


impl Policy {
  
          /// Prefix values used to generate a PDA for this account.
    ///
    /// Values are positional and appear in the following order:
    ///
                  ///   0. `Policy::PREFIX.0`
                                ///   1. `Policy::PREFIX.1`
                                ///   2. mint (`Pubkey`)
                    pub const PREFIX: (
              &'static [u8],
              &'static [u8],
            ) = (
              "shield".as_bytes(),
              "policy".as_bytes(),
            );
      
      pub fn create_pda(
                                                                                      mint: Pubkey,
                                  bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
      solana_program::pubkey::Pubkey::create_program_address(
        &[
                                    "shield".as_bytes(),
                                                "policy".as_bytes(),
                                                mint.as_ref(),
                                &[bump],
        ],
        &crate::SHIELD_ID,
      )
    }

    pub fn find_pda(
                                                                      mint: &Pubkey,
                          ) -> (solana_program::pubkey::Pubkey, u8) {
      solana_program::pubkey::Pubkey::find_program_address(
        &[
                                    "shield".as_bytes(),
                                                "policy".as_bytes(),
                                                mint.as_ref(),
                              ],
        &crate::SHIELD_ID,
      )
    }
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Policy {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Policy {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
      Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Policy {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Policy {
    fn owner() -> Pubkey {
      crate::SHIELD_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Policy {}


#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Policy {
  const DISCRIMINATOR: [u8; 8] = [0; 8];
}

