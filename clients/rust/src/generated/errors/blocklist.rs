//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum BlocklistError {
    /// 0 - Error deserializing an account
    #[error("Error deserializing an account")]
    DeserializationError = 0x0,
    /// 1 - Error serializing an account
    #[error("Error serializing an account")]
    SerializationError = 0x1,
    /// 2 - Invalid program owner. This likely mean the provided account does not exist
    #[error("Invalid program owner. This likely mean the provided account does not exist")]
    InvalidProgramOwner = 0x2,
    /// 3 - Invalid PDA derivation
    #[error("Invalid PDA derivation")]
    InvalidPda = 0x3,
    /// 4 - Expected empty account
    #[error("Expected empty account")]
    ExpectedEmptyAccount = 0x4,
    /// 5 - Expected non empty account
    #[error("Expected non empty account")]
    ExpectedNonEmptyAccount = 0x5,
    /// 6 - Expected signer account
    #[error("Expected signer account")]
    ExpectedSignerAccount = 0x6,
    /// 7 - Expected writable account
    #[error("Expected writable account")]
    ExpectedWritableAccount = 0x7,
    /// 8 - Account mismatch
    #[error("Account mismatch")]
    AccountMismatch = 0x8,
    /// 9 - Invalid account key
    #[error("Invalid account key")]
    InvalidAccountKey = 0x9,
    /// 10 - Numerical overflow
    #[error("Numerical overflow")]
    NumericalOverflow = 0xA,
    /// 11 - Expected ositive amount
    #[error("Expected ositive amount")]
    ExpectedPositiveAmount = 0xB,
    /// 12 - Incorrect token owner
    #[error("Incorrect token owner")]
    IncorrectTokenOwner = 0xC,
    /// 13 - Mismatching mint
    #[error("Mismatching mint")]
    MistmatchMint = 0xD,
    /// 14 - Validator Identity not found
    #[error("Validator Identity not found")]
    ValidatorIdentityNotFound = 0xE,
}

impl solana_program::program_error::PrintProgramError for BlocklistError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
