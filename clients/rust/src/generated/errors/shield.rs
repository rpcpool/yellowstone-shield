//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum ShieldError {
    /// 0 - Error deserializing an account
    #[error("Error deserializing an account")]
    DeserializationError = 0x0,
    /// 1 - Error serializing an account
    #[error("Error serializing an account")]
    SerializationError = 0x1,
    /// 2 - Invalid program owner. This likely mean the provided account does not exist
    #[error("Invalid program owner. This likely mean the provided account does not exist")]
    InvalidProgramOwner = 0x2,
    /// 3 - Invalid PDA derivation
    #[error("Invalid PDA derivation")]
    InvalidPda = 0x3,
    /// 4 - Expected empty account
    #[error("Expected empty account")]
    ExpectedEmptyAccount = 0x4,
    /// 5 - Expected non empty account
    #[error("Expected non empty account")]
    ExpectedNonEmptyAccount = 0x5,
    /// 6 - Expected signer account
    #[error("Expected signer account")]
    ExpectedSignerAccount = 0x6,
    /// 7 - Expected writable account
    #[error("Expected writable account")]
    ExpectedWritableAccount = 0x7,
    /// 8 - Account mismatch
    #[error("Account mismatch")]
    AccountMismatch = 0x8,
    /// 9 - Invalid account key
    #[error("Invalid account key")]
    InvalidAccountKey = 0x9,
    /// 10 - Numerical overflow
    #[error("Numerical overflow")]
    NumericalOverflow = 0xA,
    /// 11 - Expected ositive amount
    #[error("Expected ositive amount")]
    ExpectedPositiveAmount = 0xB,
    /// 12 - Incorrect token owner
    #[error("Incorrect token owner")]
    IncorrectTokenOwner = 0xC,
    /// 13 - Mismatching mint
    #[error("Mismatching mint")]
    MistmatchMint = 0xD,
    /// 14 - identity not found
    #[error("identity not found")]
    IdentityNotFound = 0xE,
    /// 15 - Invalid associated token account
    #[error("Invalid associated token account")]
    InvalidAssociatedTokenAccount = 0xF,
    /// 16 - Condition not met
    #[error("Condition not met")]
    MissedCondition = 0x10,
    /// 17 - invalid account data
    #[error("invalid account data")]
    InvalidAccountData = 0x11,
    /// 18 - Invalid argument
    #[error("Invalid argument")]
    InvalidArgument = 0x12,
    /// 19 - Invalid instruction data
    #[error("Invalid instruction data")]
    InvalidInstructionData = 0x13,
    /// 20 - Account data too small
    #[error("Account data too small")]
    AccountDataTooSmall = 0x14,
    /// 21 - Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds = 0x15,
    /// 22 - Incorrect program id
    #[error("Incorrect program id")]
    IncorrectProgramId = 0x16,
    /// 23 - Missing required signature
    #[error("Missing required signature")]
    MissingRequiredSignature = 0x17,
    /// 24 - Account already initialized
    #[error("Account already initialized")]
    AccountAlreadyInitialized = 0x18,
    /// 25 - Uninitialized account
    #[error("Uninitialized account")]
    UninitializedAccount = 0x19,
    /// 26 - Not enough account keys
    #[error("Not enough account keys")]
    NotEnoughAccountKeys = 0x1A,
    /// 27 - Account borrow failed
    #[error("Account borrow failed")]
    AccountBorrowFailed = 0x1B,
    /// 28 - Max seed length exceeded
    #[error("Max seed length exceeded")]
    MaxSeedLengthExceeded = 0x1C,
    /// 29 - Invalid seeds
    #[error("Invalid seeds")]
    InvalidSeeds = 0x1D,
    /// 30 - Borsh IO error
    #[error("Borsh IO error")]
    BorshIoError = 0x1E,
    /// 31 - Account not rent exempt
    #[error("Account not rent exempt")]
    AccountNotRentExempt = 0x1F,
    /// 32 - Unsupported sysvar
    #[error("Unsupported sysvar")]
    UnsupportedSysvar = 0x20,
    /// 33 - Illegal owner
    #[error("Illegal owner")]
    IllegalOwner = 0x21,
    /// 34 - Max accounts data allocations exceeded
    #[error("Max accounts data allocations exceeded")]
    MaxAccountsDataAllocationsExceeded = 0x22,
    /// 35 - Invalid realloc
    #[error("Invalid realloc")]
    InvalidRealloc = 0x23,
    /// 36 - Max instruction trace length exceeded
    #[error("Max instruction trace length exceeded")]
    MaxInstructionTraceLengthExceeded = 0x24,
    /// 37 - Builtin programs must consume compute units
    #[error("Builtin programs must consume compute units")]
    BuiltinProgramsMustConsumeComputeUnits = 0x25,
    /// 38 - Invalid account owner
    #[error("Invalid account owner")]
    InvalidAccountOwner = 0x26,
    /// 39 - Arithmetic overflow
    #[error("Arithmetic overflow")]
    ArithmeticOverflow = 0x27,
    /// 40 - Immutable
    #[error("Immutable")]
    Immutable = 0x28,
    /// 41 - Incorrect authority
    #[error("Incorrect authority")]
    IncorrectAuthority = 0x29,
    /// 42 - Generic program error
    #[error("Generic program error")]
    GenericError = 0x2A,
    /// 43 - Invalid strategy
    #[error("Invalid strategy")]
    InvalidStrategy = 0x2B,
    /// 44 - Invalid Policy Kind
    #[error("Invalid Policy Kind")]
    InvalidPolicyKind = 0x2C,
    /// 45 - Invalid Index To Reference Identity
    #[error("Invalid Index To Reference Identity")]
    InvalidIndexToReferenceIdentity = 0x2D,
}

#[allow(deprecated)]
impl solana_program::program_error::PrintProgramError for ShieldError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for ShieldError {
    fn type_of() -> &'static str {
        "ShieldError"
    }
}
