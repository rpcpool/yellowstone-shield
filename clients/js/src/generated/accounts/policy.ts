/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { PolicySeeds, findPolicyPda } from '../pdas';
import {
  Kind,
  getKindDecoder,
  getKindEncoder,
  getPermissionStrategyDecoder,
  getPermissionStrategyEncoder,
  type PermissionStrategy,
  type PermissionStrategyArgs,
} from '../types';

export const POLICY_KIND = Kind.Policy;

export function getPolicyKindBytes() {
  return getKindEncoder().encode(POLICY_KIND);
}

export type Policy = {
  kind: Kind;
  strategy: PermissionStrategy;
  nonce: number;
  identities: Array<Address>;
};

export type PolicyArgs = {
  strategy: PermissionStrategyArgs;
  nonce: number;
  identities: Array<Address>;
};

export function getPolicyEncoder(): Encoder<PolicyArgs> {
  return transformEncoder(
    getStructEncoder([
      ['kind', getKindEncoder()],
      ['strategy', getPermissionStrategyEncoder()],
      ['nonce', getU8Encoder()],
      ['identities', getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, kind: POLICY_KIND })
  );
}

export function getPolicyDecoder(): Decoder<Policy> {
  return getStructDecoder([
    ['kind', getKindDecoder()],
    ['strategy', getPermissionStrategyDecoder()],
    ['nonce', getU8Decoder()],
    ['identities', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getPolicyCodec(): Codec<PolicyArgs, Policy> {
  return combineCodec(getPolicyEncoder(), getPolicyDecoder());
}

export function decodePolicy<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Policy, TAddress>;
export function decodePolicy<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Policy, TAddress>;
export function decodePolicy<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Policy, TAddress> | MaybeAccount<Policy, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPolicyDecoder()
  );
}

export async function fetchPolicy<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Policy, TAddress>> {
  const maybeAccount = await fetchMaybePolicy(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePolicy<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Policy, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePolicy(maybeAccount);
}

export async function fetchAllPolicy(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Policy>[]> {
  const maybeAccounts = await fetchAllMaybePolicy(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePolicy(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Policy>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePolicy(maybeAccount));
}

export function getPolicySize(): number {
  return 7;
}

export async function fetchPolicyFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PolicySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Policy>> {
  const maybeAccount = await fetchMaybePolicyFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePolicyFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PolicySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Policy>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findPolicyPda(seeds, { programAddress });
  return await fetchMaybePolicy(rpc, address, fetchConfig);
}
