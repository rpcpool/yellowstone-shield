/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { PolicyV2Seeds, findPolicyV2Pda } from '../pdas';

export type PolicyV2 = {
  kind: number;
  strategy: number;
  nonce: number;
  mint: Address;
  identitiesLen: ReadonlyUint8Array;
};

export type PolicyV2Args = PolicyV2;

export function getPolicyV2Encoder(): Encoder<PolicyV2Args> {
  return getStructEncoder([
    ['kind', getU8Encoder()],
    ['strategy', getU8Encoder()],
    ['nonce', getU8Encoder()],
    ['mint', getAddressEncoder()],
    ['identitiesLen', fixEncoderSize(getBytesEncoder(), 4)],
  ]);
}

export function getPolicyV2Decoder(): Decoder<PolicyV2> {
  return getStructDecoder([
    ['kind', getU8Decoder()],
    ['strategy', getU8Decoder()],
    ['nonce', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['identitiesLen', fixDecoderSize(getBytesDecoder(), 4)],
  ]);
}

export function getPolicyV2Codec(): Codec<PolicyV2Args, PolicyV2> {
  return combineCodec(getPolicyV2Encoder(), getPolicyV2Decoder());
}

export function decodePolicyV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PolicyV2, TAddress>;
export function decodePolicyV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PolicyV2, TAddress>;
export function decodePolicyV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PolicyV2, TAddress> | MaybeAccount<PolicyV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPolicyV2Decoder()
  );
}

export async function fetchPolicyV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PolicyV2, TAddress>> {
  const maybeAccount = await fetchMaybePolicyV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePolicyV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PolicyV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePolicyV2(maybeAccount);
}

export async function fetchAllPolicyV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PolicyV2>[]> {
  const maybeAccounts = await fetchAllMaybePolicyV2(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePolicyV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PolicyV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePolicyV2(maybeAccount));
}

export function getPolicyV2Size(): number {
  return 39;
}

export async function fetchPolicyV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PolicyV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<PolicyV2>> {
  const maybeAccount = await fetchMaybePolicyV2FromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePolicyV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PolicyV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<PolicyV2>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findPolicyV2Pda(seeds, { programAddress });
  return await fetchMaybePolicyV2(rpc, address, fetchConfig);
}
