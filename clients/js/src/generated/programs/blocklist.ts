/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCreatePolicyInstruction,
  type ParsedPopIdentityInstruction,
  type ParsedPushIdentityInstruction,
} from '../instructions';
import { Kind, getKindEncoder } from '../types';

export const BLOCKLIST_PROGRAM_ADDRESS =
  'F3m9yDRsqMeHmi2h2wrSB8UprqnnuUsvkAhDZ23T9kNr' as Address<'F3m9yDRsqMeHmi2h2wrSB8UprqnnuUsvkAhDZ23T9kNr'>;

export enum BlocklistAccount {
  Policy,
}

export function identifyBlocklistAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BlocklistAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getKindEncoder().encode(Kind.Policy), 0)) {
    return BlocklistAccount.Policy;
  }
  throw new Error(
    'The provided account could not be identified as a blocklist account.'
  );
}

export enum BlocklistInstruction {
  CreatePolicy,
  PushIdentity,
  PopIdentity,
}

export function identifyBlocklistInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BlocklistInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return BlocklistInstruction.CreatePolicy;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return BlocklistInstruction.PushIdentity;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return BlocklistInstruction.PopIdentity;
  }
  throw new Error(
    'The provided instruction could not be identified as a blocklist instruction.'
  );
}

export type ParsedBlocklistInstruction<
  TProgram extends string = 'F3m9yDRsqMeHmi2h2wrSB8UprqnnuUsvkAhDZ23T9kNr',
> =
  | ({
      instructionType: BlocklistInstruction.CreatePolicy;
    } & ParsedCreatePolicyInstruction<TProgram>)
  | ({
      instructionType: BlocklistInstruction.PushIdentity;
    } & ParsedPushIdentityInstruction<TProgram>)
  | ({
      instructionType: BlocklistInstruction.PopIdentity;
    } & ParsedPopIdentityInstruction<TProgram>);
