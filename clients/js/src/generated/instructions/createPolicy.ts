/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  BASE_ACCOUNT_SIZE,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { getPolicySize } from '../accounts';
import { findPolicyPda } from '../pdas';
import { SHIELD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type IInstructionWithByteDelta,
  type ResolvedAccount,
} from '../shared';
import {
  getPermissionStrategyDecoder,
  getPermissionStrategyEncoder,
  type PermissionStrategy,
  type PermissionStrategyArgs,
} from '../types';

export const CREATE_POLICY_DISCRIMINATOR = 0;

export function getCreatePolicyDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_POLICY_DISCRIMINATOR);
}

export type CreatePolicyInstruction<
  TProgram extends string = typeof SHIELD_PROGRAM_ADDRESS,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPolicy extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? ReadonlyAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountPolicy extends string
        ? WritableAccount<TAccountPolicy>
        : TAccountPolicy,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePolicyInstructionData = {
  discriminator: number;
  strategy: PermissionStrategy;
  identities: Array<Address>;
};

export type CreatePolicyInstructionDataArgs = {
  strategy: PermissionStrategyArgs;
  identities: Array<Address>;
};

export function getCreatePolicyInstructionDataEncoder(): Encoder<CreatePolicyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['strategy', getPermissionStrategyEncoder()],
      ['identities', getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_POLICY_DISCRIMINATOR })
  );
}

export function getCreatePolicyInstructionDataDecoder(): Decoder<CreatePolicyInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['strategy', getPermissionStrategyDecoder()],
    ['identities', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getCreatePolicyInstructionDataCodec(): Codec<
  CreatePolicyInstructionDataArgs,
  CreatePolicyInstructionData
> {
  return combineCodec(
    getCreatePolicyInstructionDataEncoder(),
    getCreatePolicyInstructionDataDecoder()
  );
}

export type CreatePolicyAsyncInput<
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountPolicy extends string = string,
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The token extensions mint account linked to the policy */
  mint: Address<TAccountMint>;
  /** The authority over the policy based on token ownership of the mint */
  tokenAccount: Address<TAccountTokenAccount>;
  /** The shield policy account */
  policy?: Address<TAccountPolicy>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The owner of the token account */
  owner?: TransactionSigner<TAccountOwner>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  strategy: CreatePolicyInstructionDataArgs['strategy'];
  identities: CreatePolicyInstructionDataArgs['identities'];
};

export async function getCreatePolicyInstructionAsync<
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountPolicy extends string,
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SHIELD_PROGRAM_ADDRESS,
>(
  input: CreatePolicyAsyncInput<
    TAccountMint,
    TAccountTokenAccount,
    TAccountPolicy,
    TAccountPayer,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePolicyInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountTokenAccount,
    TAccountPolicy,
    TAccountPayer,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTokenProgram
  > &
    IInstructionWithByteDelta
> {
  // Program address.
  const programAddress = config?.programAddress ?? SHIELD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: false },
    policy: { value: input.policy ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.policy.value) {
    accounts.policy.value = await findPolicyPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.owner.value) {
    accounts.owner.value = expectSome(accounts.payer.value);
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  // Bytes created or reallocated by the instruction.
  const byteDelta: number = [getPolicySize() + BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.policy),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreatePolicyInstructionDataEncoder().encode(
      args as CreatePolicyInstructionDataArgs
    ),
  } as CreatePolicyInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountTokenAccount,
    TAccountPolicy,
    TAccountPayer,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return Object.freeze({ ...instruction, byteDelta });
}

export type CreatePolicyInput<
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountPolicy extends string = string,
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The token extensions mint account linked to the policy */
  mint: Address<TAccountMint>;
  /** The authority over the policy based on token ownership of the mint */
  tokenAccount: Address<TAccountTokenAccount>;
  /** The shield policy account */
  policy: Address<TAccountPolicy>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The owner of the token account */
  owner?: TransactionSigner<TAccountOwner>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  strategy: CreatePolicyInstructionDataArgs['strategy'];
  identities: CreatePolicyInstructionDataArgs['identities'];
};

export function getCreatePolicyInstruction<
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountPolicy extends string,
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SHIELD_PROGRAM_ADDRESS,
>(
  input: CreatePolicyInput<
    TAccountMint,
    TAccountTokenAccount,
    TAccountPolicy,
    TAccountPayer,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePolicyInstruction<
  TProgramAddress,
  TAccountMint,
  TAccountTokenAccount,
  TAccountPolicy,
  TAccountPayer,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountTokenProgram
> &
  IInstructionWithByteDelta {
  // Program address.
  const programAddress = config?.programAddress ?? SHIELD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: false },
    policy: { value: input.policy ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.owner.value) {
    accounts.owner.value = expectSome(accounts.payer.value);
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  // Bytes created or reallocated by the instruction.
  const byteDelta: number = [getPolicySize() + BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.policy),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreatePolicyInstructionDataEncoder().encode(
      args as CreatePolicyInstructionDataArgs
    ),
  } as CreatePolicyInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountTokenAccount,
    TAccountPolicy,
    TAccountPayer,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return Object.freeze({ ...instruction, byteDelta });
}

export type ParsedCreatePolicyInstruction<
  TProgram extends string = typeof SHIELD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The token extensions mint account linked to the policy */
    mint: TAccountMetas[0];
    /** The authority over the policy based on token ownership of the mint */
    tokenAccount: TAccountMetas[1];
    /** The shield policy account */
    policy: TAccountMetas[2];
    /** The account paying for the storage fees */
    payer: TAccountMetas[3];
    /** The owner of the token account */
    owner: TAccountMetas[4];
    /** The system program */
    systemProgram: TAccountMetas[5];
    /** The token program */
    tokenProgram: TAccountMetas[6];
  };
  data: CreatePolicyInstructionData;
};

export function parseCreatePolicyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreatePolicyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      policy: getNextAccount(),
      payer: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCreatePolicyInstructionDataDecoder().decode(instruction.data),
  };
}
