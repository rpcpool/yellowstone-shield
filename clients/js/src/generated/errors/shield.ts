/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { SHIELD_PROGRAM_ADDRESS } from '../programs';

/** DeserializationError: Error deserializing an account */
export const SHIELD_ERROR__DESERIALIZATION_ERROR = 0x0; // 0
/** SerializationError: Error serializing an account */
export const SHIELD_ERROR__SERIALIZATION_ERROR = 0x1; // 1
/** InvalidProgramOwner: Invalid program owner. This likely mean the provided account does not exist */
export const SHIELD_ERROR__INVALID_PROGRAM_OWNER = 0x2; // 2
/** InvalidPda: Invalid PDA derivation */
export const SHIELD_ERROR__INVALID_PDA = 0x3; // 3
/** ExpectedEmptyAccount: Expected empty account */
export const SHIELD_ERROR__EXPECTED_EMPTY_ACCOUNT = 0x4; // 4
/** ExpectedNonEmptyAccount: Expected non empty account */
export const SHIELD_ERROR__EXPECTED_NON_EMPTY_ACCOUNT = 0x5; // 5
/** ExpectedSignerAccount: Expected signer account */
export const SHIELD_ERROR__EXPECTED_SIGNER_ACCOUNT = 0x6; // 6
/** ExpectedWritableAccount: Expected writable account */
export const SHIELD_ERROR__EXPECTED_WRITABLE_ACCOUNT = 0x7; // 7
/** AccountMismatch: Account mismatch */
export const SHIELD_ERROR__ACCOUNT_MISMATCH = 0x8; // 8
/** InvalidAccountKey: Invalid account key */
export const SHIELD_ERROR__INVALID_ACCOUNT_KEY = 0x9; // 9
/** NumericalOverflow: Numerical overflow */
export const SHIELD_ERROR__NUMERICAL_OVERFLOW = 0xa; // 10
/** ExpectedPositiveAmount: Expected ositive amount */
export const SHIELD_ERROR__EXPECTED_POSITIVE_AMOUNT = 0xb; // 11
/** IncorrectTokenOwner: Incorrect token owner */
export const SHIELD_ERROR__INCORRECT_TOKEN_OWNER = 0xc; // 12
/** MistmatchMint: Mismatching mint */
export const SHIELD_ERROR__MISTMATCH_MINT = 0xd; // 13
/** ValidatorIdentityNotFound: Validator Identity not found */
export const SHIELD_ERROR__VALIDATOR_IDENTITY_NOT_FOUND = 0xe; // 14
/** InvalidAssociatedTokenAccount: Invalid associated token account */
export const SHIELD_ERROR__INVALID_ASSOCIATED_TOKEN_ACCOUNT = 0xf; // 15

export type ShieldError =
  | typeof SHIELD_ERROR__ACCOUNT_MISMATCH
  | typeof SHIELD_ERROR__DESERIALIZATION_ERROR
  | typeof SHIELD_ERROR__EXPECTED_EMPTY_ACCOUNT
  | typeof SHIELD_ERROR__EXPECTED_NON_EMPTY_ACCOUNT
  | typeof SHIELD_ERROR__EXPECTED_POSITIVE_AMOUNT
  | typeof SHIELD_ERROR__EXPECTED_SIGNER_ACCOUNT
  | typeof SHIELD_ERROR__EXPECTED_WRITABLE_ACCOUNT
  | typeof SHIELD_ERROR__INCORRECT_TOKEN_OWNER
  | typeof SHIELD_ERROR__INVALID_ACCOUNT_KEY
  | typeof SHIELD_ERROR__INVALID_ASSOCIATED_TOKEN_ACCOUNT
  | typeof SHIELD_ERROR__INVALID_PDA
  | typeof SHIELD_ERROR__INVALID_PROGRAM_OWNER
  | typeof SHIELD_ERROR__MISTMATCH_MINT
  | typeof SHIELD_ERROR__NUMERICAL_OVERFLOW
  | typeof SHIELD_ERROR__SERIALIZATION_ERROR
  | typeof SHIELD_ERROR__VALIDATOR_IDENTITY_NOT_FOUND;

let shieldErrorMessages: Record<ShieldError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  shieldErrorMessages = {
    [SHIELD_ERROR__ACCOUNT_MISMATCH]: `Account mismatch`,
    [SHIELD_ERROR__DESERIALIZATION_ERROR]: `Error deserializing an account`,
    [SHIELD_ERROR__EXPECTED_EMPTY_ACCOUNT]: `Expected empty account`,
    [SHIELD_ERROR__EXPECTED_NON_EMPTY_ACCOUNT]: `Expected non empty account`,
    [SHIELD_ERROR__EXPECTED_POSITIVE_AMOUNT]: `Expected ositive amount`,
    [SHIELD_ERROR__EXPECTED_SIGNER_ACCOUNT]: `Expected signer account`,
    [SHIELD_ERROR__EXPECTED_WRITABLE_ACCOUNT]: `Expected writable account`,
    [SHIELD_ERROR__INCORRECT_TOKEN_OWNER]: `Incorrect token owner`,
    [SHIELD_ERROR__INVALID_ACCOUNT_KEY]: `Invalid account key`,
    [SHIELD_ERROR__INVALID_ASSOCIATED_TOKEN_ACCOUNT]: `Invalid associated token account`,
    [SHIELD_ERROR__INVALID_PDA]: `Invalid PDA derivation`,
    [SHIELD_ERROR__INVALID_PROGRAM_OWNER]: `Invalid program owner. This likely mean the provided account does not exist`,
    [SHIELD_ERROR__MISTMATCH_MINT]: `Mismatching mint`,
    [SHIELD_ERROR__NUMERICAL_OVERFLOW]: `Numerical overflow`,
    [SHIELD_ERROR__SERIALIZATION_ERROR]: `Error serializing an account`,
    [SHIELD_ERROR__VALIDATOR_IDENTITY_NOT_FOUND]: `Validator Identity not found`,
  };
}

export function getShieldErrorMessage(code: ShieldError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (shieldErrorMessages as Record<ShieldError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isShieldError<TProgramErrorCode extends ShieldError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SHIELD_PROGRAM_ADDRESS,
    code
  );
}
