//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh_0_10::BorshDeserialize;
use yellowstone_shield_client::instructions::{
    AddIdentity as AddIdentityIxAccounts, AddIdentityInstructionArgs as AddIdentityIxData,
    CreatePolicy as CreatePolicyIxAccounts, CreatePolicyInstructionArgs as CreatePolicyIxData,
    RemoveIdentity as RemoveIdentityIxAccounts,
    RemoveIdentityInstructionArgs as RemoveIdentityIxData,
};
use yellowstone_shield_client::ID;

/// Shield Instructions
#[derive(Debug)]
#[allow(dead_code)]
pub enum ShieldProgramIx {
    CreatePolicy(CreatePolicyIxAccounts, CreatePolicyIxData),
    AddIdentity(AddIdentityIxAccounts, AddIdentityIxData),
    RemoveIdentity(RemoveIdentityIxAccounts, RemoveIdentityIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = ShieldProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "Shield::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<ShieldProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 1] = ix.data[0..1].try_into()?;
        let mut ix_data = &ix.data[1..];
        match ix_discriminator {
            [0] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = CreatePolicyIxAccounts {
                    mint: ix.accounts[0].0.into(),
                    token_account: ix.accounts[1].0.into(),
                    policy: ix.accounts[2].0.into(),
                    payer: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: CreatePolicyIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(ShieldProgramIx::CreatePolicy(ix_accounts, de_ix_data))
            }
            [1] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = AddIdentityIxAccounts {
                    mint: ix.accounts[0].0.into(),
                    token_account: ix.accounts[1].0.into(),
                    policy: ix.accounts[2].0.into(),
                    payer: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: AddIdentityIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(ShieldProgramIx::AddIdentity(ix_accounts, de_ix_data))
            }
            [2] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = RemoveIdentityIxAccounts {
                    mint: ix.accounts[0].0.into(),
                    token_account: ix.accounts[1].0.into(),
                    policy: ix.accounts[2].0.into(),
                    payer: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: RemoveIdentityIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(ShieldProgramIx::RemoveIdentity(ix_accounts, de_ix_data))
            }
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
