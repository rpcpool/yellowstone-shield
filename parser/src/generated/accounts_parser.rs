//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use yellowstone_shield_client::accounts::Policy;
use yellowstone_shield_client::ID;
use yellowstone_vixen_core::AccountUpdate;

/// Shield Program State
#[allow(clippy::large_enum_variant, dead_code)]
#[derive(Debug, Clone)]
pub enum ShieldProgramState {
    Policy(u64, Pubkey, Policy),
}

impl ShieldProgramState {
    pub fn try_unpack(account_update: &AccountUpdate) -> yellowstone_vixen_core::ParseResult<Self> {
        let inner = account_update
            .account
            .as_ref()
            .ok_or_else(|| solana_program::program_error::ProgramError::InvalidArgument)?;
        let data = inner.data.as_slice();

        if data.is_empty() {
            return Err(yellowstone_vixen_core::ParseError::from(
                "Data is empty".to_owned(),
            ));
        }

        match data[0] {
            0 => {
                let policy = Policy::from_bytes(data)?;

                Ok(ShieldProgramState::Policy(
                    account_update.slot,
                    Pubkey::try_from(inner.pubkey.as_slice())?,
                    policy,
                ))
            }
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Unsupported data type".to_owned(),
            )),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = ShieldProgramState;

    fn id(&self) -> std::borrow::Cow<str> {
        "shield::AccountParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        ShieldProgramState::try_unpack(acct)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}
